
name: Windows + upstream zlib-ng

# DISABLED for all automatic execution
# Disabled - strawberry perl always uses system zlib

on:
  workflow_dispatch:
  # push:
  # pull_request:
  # schedule:
  #   - cron: '01 01 * * 6'    # Run every Saturday

jobs:

  build-msys2-ucrt64:

    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}
        working-directory: repo

    strategy:
      matrix:
        perl:
          - latest
        zlib-version:
          - 'develop'
          - '2.1.6'
          - '2.1.5'
          - '2.1.4'
          # - '2.1.3'
          # - '2.1.2'
          # - '2.0.7'
          # - '2.0.6'
          # - '2.0.5'
          # - '2.0.4'
          # - '2.0.3'
          # - '2.0.2'
          # - '2.0.1'
          # - '2.0.0'
        zlib-native:
          # - 1
          - 0
    env:
      zlib-source:      ${{ github.workspace }}/upstream-zlib-source
      zlib-install:     ${{ github.workspace }}/upstream-zlib-install
      ZLIB_LIB:         ${{ github.workspace }}/upstream-zlib-install/lib
      ZLIB_INCLUDE:     ${{ github.workspace }}/upstream-zlib-install/include
      ZLIB_VERSION:     ${{ matrix.zlib-version }}
      BUILD_ZLIB:       0
      ZLIB_NG_PRESENT:  1
      USE_ZLIB_NG:      ${{ matrix.zlib-native }}
      NG_COMPAT_MODE:   ${{ matrix.zlib-native == 1 && 'OFF' || 'ON' }}

      # Run each step if
      # 1. Not a scheduled job
      # 2. Is sheduled AND zlib 'develop'
      STEP_ENABLED:     ${{ ( github.event_name != 'schedule' || ( github.event_name == 'schedule' &&  matrix.zlib-version == 'develop' ) ) && true || '' }}


    steps:
      - uses: actions/checkout@v4
        with:
          path: repo

      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: false
          install: >-
            cmake
            make
            mingw-w64-x86_64-perl
            mingw-w64-ucrt-x86_64-gcc

      - name: Make Paths
        if: env.STEP_ENABLED
        run: |
          mkdir -p ${{ env.zlib-source }}
          mkdir -p ${{ env.zlib-install }}
          mkdir -p ${{ github.workspace }}/repo

      - name: Cache zlib ${{matrix.zlib-version}} USE_ZLIB_NG=${{ matrix.zlib-native }}
        id: cache-zlib
        uses: actions/cache@v4
        with:
          # NOTE: path doesn't expand variables!
          path: upstream-zlib-install
          key: ${{ runner.os }}-${{ runner.arch }}-zlib-ng-${{ matrix.zlib-version }}-${{ matrix.zlib-native }}

      - name: Wipe develop cached files, if found
        if: env.STEP_ENABLED && matrix.zlib-version == 'develop' && steps.cache-zlib.outputs.cache-hit
        run: |
          rm -fr ${{ env.zlib-install }}
          mkdir -p ${{ env.zlib-install }}

      - name: Checkout upstream zlib-ng ${{matrix.zlib-version}} USE_ZLIB_NG=${{ matrix.zlib-native }}
        if: env.STEP_ENABLED && ( matrix.zlib-version == 'develop' || ! steps.cache-zlib.outputs.cache-hit )
        uses: actions/checkout@v4
        with:
          repository: zlib-ng/zlib-ng
          ref: ${{ matrix.zlib-version }}
          path: ${{ env.zlib-source }}

      - name: Build zlib-ng ${{matrix.zlib-version}} USE_ZLIB_NG=${{ matrix.zlib-native }}
        if: env.STEP_ENABLED && ( matrix.zlib-version == 'develop' || ! steps.cache-zlib.outputs.cache-hit )
        run: |
          mkdir build
          cd build
          cmake .. \
            -DZLIB_COMPAT=${{ env.NG_COMPAT_MODE }} \
            -DCMAKE_INSTALL_PREFIX=${{ env.zlib-install }} \
            -DZLIBNG_ENABLE_TESTS=OFF \
            -DWITH_GZFILEOP=OFF \
            -DZLIB_ENABLE_TESTS=OFF \
            -DZLIBNG_ENABLE_TESTS=OFF \
            -DWITH_OPTIM=OFF
          make install
        working-directory: ${{ env.zlib-source }}

      # - name: Show installed zlib files
      #   if: env.STEP_ENABLED
      #   run: |
      #     find .
      #   # shell: bash
      #   working-directory: ${{ env.zlib-install }}

      # - name: Setup perl
      #   if: env.STEP_ENABLED
      #   uses: shogo82148/actions-setup-perl@v1
      #   with:
      #     perl-version: ${{ matrix.perl }}

      - name: Perl version
        if: env.STEP_ENABLED
        run: perl -V

      #- name: Install dependencies
      #  if: env.STEP_ENABLED
      #  run: |
      #    cpanm --verbose --installdeps --notest .

      - name: Build
        if: env.STEP_ENABLED
        run: |
          perl Makefile.PL && make

      - name: Test
        if: env.STEP_ENABLED
        run: make test

  # build:

  #   runs-on: windows-latest

  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: repo

  #   strategy:
  #     matrix:
  #       perl:
  #         - '5.38'
  #       zlib-version:
  #         - 'develop'
  #         - '2.1.3'
  #         # - '2.1.2'
  #         # - '2.0.7'
  #         # - '2.0.6'
  #         # - '2.0.5'
  #         # - '2.0.4'
  #         # - '2.0.3'
  #         # - '2.0.2'
  #         # - '2.0.1'
  #         # - '2.0.0'
  #       zlib-native:
  #         # - 1
  #         - 0

  #   env:
  #     # zlib-source:      ${{ github.workspace }}/upstream-zlib-source
  #     # zlib-install:     ${{ github.workspace }}/upstream-zlib-install
  #     # ZLIB_LIB:         ${{ github.workspace }}/upstream-zlib-install/lib
  #     # ZLIB_INCLUDE:     ${{ github.workspace }}/upstream-zlib-install/include
  #     ZLIB_VERSION:     ${{ matrix.zlib-version }}
  #     BUILD_ZLIB:       0
  #     ZLIB_NG_PRESENT:  1
  #     USE_ZLIB_NG:      ${{ matrix.zlib-native }}
  #     NG_COMPAT_MODE:   ${{ matrix.zlib-native == 1 && 'OFF' || 'ON' }}

  #     # Run each step if
  #     # 1. Not a scheduled job
  #     # 2. Is sheduled AND zlib 'develop'
  #     STEP_ENABLED:     ${{ ( github.event_name != 'schedule' || ( github.event_name == 'schedule' &&  matrix.zlib-version == 'develop' ) ) && true || '' }}


  #   name: Perl ${{ matrix.perl }} with zlib-ng ${{matrix.zlib-version}}  USE_ZLIB_NG=${{ matrix.zlib-native }}

  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       path: repo

  #   # - name: Cache zlib ${{matrix.zlib-version}} ${{ matrix.zlib-native }}
  #   #   id: cache-zlib
  #   #   uses: actions/cache@v4
  #   #   with:
  #   #     # NOTE: path doesn't expand variables!
  #   #     path: /home/runner/upstream-zlib-install
  #   #     key: ${{ runner.os }}-zlib-ng-${{ matrix.zlib-version }}-${{ matrix.zlib-native }}

  #   # - name: Set Env
  #   #   run: |
  #   #     echo "zlib-source=${GITHUB_WORKSPACE}/upstream-zlib-source"  >> $GITHUB_ENV
  #   #     echo "zlib-install=${HOME}/upstream-zlib-install"            >> $GITHUB_ENV
  #   #     echo "ZLIB_LIB=${HOME}/upstream-zlib-install/lib"            >> $GITHUB_ENV
  #   #     echo "ZLIB_INCLUDE=${HOME}/upstream-zlib-install/include"    >> $GITHUB_ENV

  #   - name: Set GITHUB_WORKSPACE_UNIX
  #     run: |
  #       perl -e '$a = shift; $a =~ s#^(.):\\#q[/] . lc($1) . q[/]#e; $a =~ s#\\#/#g; print qq[GITHUB_WORKSPACE_UNIX=$a\n]' ${GITHUB_WORKSPACE} >> $GITHUB_ENV
  #     shell: bash

  #   - name: Set Env
  #     run: |
  #       echo "zlib-source=${GITHUB_WORKSPACE}\upstream-zlib-source"                     >> $GITHUB_ENV
  #       echo "zlib-source-unix=${{ env.GITHUB_WORKSPACE_UNIX }}/upstream-zlib-source"   >> $GITHUB_ENV
  #       echo "zlib-install=${GITHUB_WORKSPACE}\upstream-zlib-install"                   >> $GITHUB_ENV
  #       echo "zlib-install-unix=${{ env.GITHUB_WORKSPACE_UNIX }}/upstream-zlib-install" >> $GITHUB_ENV
  #     shell: bash

  #   - name: Set Env
  #     run: |
  #       env | sort
  #     shell: bash

  #   - name: Set Env
  #     run: |
  #       set
  #     shell: cmd

  #   - name: Checkout upstream zlib-ng ${{matrix.zlib-version}}
  #     if: env.STEP_ENABLED && ( matrix.zlib-version == 'develop' || ! steps.cache-zlib.outputs.cache-hit )
  #     uses: actions/checkout@v4
  #     with:
  #       repository: zlib-ng/zlib-ng
  #       ref: ${{ matrix.zlib-version }}
  #       path: upstream-zlib-source

  #   # - name: Build zlib-ng ${{matrix.zlib-version}} in zlib-compat mode
  #   #   if: ${{ ! matrix.zlib-native }}
  #   #   run: |
  #   #     pwd
  #   #     ls -l
  #   #     ./configure --prefix ${{ env.zlib-install }} --libdir ${{ env.zlib-install }}/lib  --zlib-compat
  #   #     make
  #   #     make test
  #   #     make install
  #   #   working-directory: ${{ env.zlib-source }}
  #   #   shell: bash

  #   # - name: Build zlib-ng ${{matrix.zlib-version}} zlib native mode
  #   #   if: ${{ matrix.zlib-native }}
  #   #   run: |
  #   #     ./configure --prefix ${{ env.zlib-install }} --libdir ${{ env.zlib-install }}/lib
  #   #     make
  #   #     make test
  #   #     make install
  #   #   working-directory: ${{ env.zlib-source }}
  #   #   shell: bash



  #   # - name: Build zlib-ng ${{matrix.zlib-version}} USE_ZLIB_NG=${{ matrix.zlib-native }}
  #   #   if: env.STEP_ENABLED && ( matrix.zlib-version == 'develop' || ! steps.cache-zlib.outputs.cache-hit )
  #   #   run: |
  #   #     cmake -G Ninja -S . -B .  \
  #   #       --install-prefix=${{ env.zlib-install-unix }} \
  #   #       -DZLIB_COMPAT=${{ env.NG_COMPAT_MODE }} \
  #   #       -DCMAKE_C_COMPILER=gcc \
  #   #       -DCMAKE_CXX_COMPILER=g++ \
  #   #       -DCMAKE_BUILD_TYPE='Release' \
  #   #       -DBUILD_SHARED_LIBS='ON' \
  #   #       -DWITH_FUZZERS=OFF \
  #   #       -DZLIBNG_ENABLE_TESTS=OFF \
  #   #       -DWITH_GZFILEOP=OFF \
  #   #       -DZLIB_ENABLE_TESTS=OFF \
  #   #       -DWITH_OPTIM=OFF \
  #   #       -DWITH_MAINTAINER_WARNINGS=OFF
  #   #     cmake --build .
  #   #     cmake --install .
  #   #   working-directory: upstream-zlib-source
  #   #   shell: bash

  #   - name: Build zlib-ng ${{matrix.zlib-version}} USE_ZLIB_NG=${{ matrix.zlib-native }}
  #     if: env.STEP_ENABLED && ( matrix.zlib-version == 'develop' || ! steps.cache-zlib.outputs.cache-hit )
  #     run: |
  #       cmake -G "MSYS Makefiles" -S . -B .  \
  #         --install-prefix=${{ env.zlib-install-unix }} \
  #         -DZLIB_COMPAT=${{ env.NG_COMPAT_MODE }} \
  #         -DCMAKE_C_COMPILER=gcc \
  #         -DCMAKE_CXX_COMPILER=g++ \
  #         -DCMAKE_BUILD_TYPE='Release' \
  #         -DBUILD_SHARED_LIBS='ON' \
  #         -DWITH_FUZZERS=OFF \
  #         -DZLIBNG_ENABLE_TESTS=OFF \
  #         -DWITH_GZFILEOP=OFF \
  #         -DZLIB_ENABLE_TESTS=OFF \
  #         -DWITH_OPTIM=OFF \
  #         -DWITH_MAINTAINER_WARNINGS=OFF
  #       cmake --build .
  #       cmake --install .
  #     working-directory: upstream-zlib-source
  #     shell: bash

  #   - name: Show installed zlib files
  #     run: |
  #       find .
  #     working-directory: upstream-zlib-install
  #     shell: bash

  #   - name: append vclib installed lib dir to path
  #     run: |
  #       echo ${{ env.zlib-install }}\bin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
  #     shell: pwsh

  #   - name: Setup perl
  #     uses: shogo82148/actions-setup-perl@v1
  #     with:
  #       perl-version: ${{ matrix.perl }}

  #   - name: Perl version
  #     run: perl -V
  #     shell: cmd

  #   #- name: Install dependencies
  #   #  run: |
  #   #    cpanm --verbose --installdeps --notest .

  #   - name: Set Env Windows
  #     run: |
  #       echo "ZLIB_LIB=${GITHUB_WORKSPACE}\upstream-zlib-install\bin"            >> $GITHUB_ENV
  #       echo "ZLIB_INCLUDE=${GITHUB_WORKSPACE}\upstream-zlib-install\include"    >> $GITHUB_ENV
  #     shell: bash

  #   - name: Show Env (cmd)
  #     run: |
  #       set
  #     shell: cmd

  #   - name: Show Env (bash)
  #     run: |
  #       env | sort
  #     shell: bash

  #   - name: Build
  #     run: |
  #       perl.exe Makefile.PL && make
  #     shell: cmd

  #   - name: Test
  #     run: make test
  #     shell: cmd
